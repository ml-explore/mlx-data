version: 2.1

orbs:
  apple: ml-explore/pr-approval@0.1.0

parameters:
  dev_release:
    type: boolean
    default: false
  pypi_release:
    type: boolean
    default: false

executors:
  manylinux2014:
    docker:
      - image: quay.io/pypa/manylinux2014_x86_64

jobs:
  build_documentation:
    parameters:
      upload-docs:
        type: boolean
        default: false
    macos:
      xcode: "15.2.0"
    resource_class: m2pro.medium
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            brew install python@3.9
            brew install doxygen
            brew install libsndfile libsamplerate ffmpeg jpeg-turbo zlib bzip2 xz aws-sdk-cpp
            python3.9 -m venv env
            source env/bin/activate
            pip install --upgrade pip
            pip install --upgrade cmake
            pip install --upgrade pybind11[global]
            pip install numpy
      - run:
          name: Build and install package
          command: |
            source env/bin/activate
            pip install -r docs/requirements.txt
            CMAKE_ARGS="-DMLX_ENABLE_AWS=ON" \
              CMAKE_BUILD_PARALLEL_LEVEL=`sysctl -n hw.ncpu` \
              pip install . -v
      - when:
          condition:
            not: << parameters.upload-docs >>
          steps:
            - run:
               name: Build documentation
               command: |
                 source env/bin/activate
                 cd docs && make html O=-W
      - when:
          condition: << parameters.upload-docs >>
          steps:
            - add_ssh_keys:
                fingerprints:
                  - "SHA256:DMz9cDVA4TMhGAPT8PkGOTvtKCModSdZqorNfZfynms"
            - run:
               name: Upload documentation
               command: |
                 source env/bin/activate
                 git config user.email "mlx@group.apple.com"
                 git config user.name "CircleCI Docs"
                 git checkout gh-pages
                 git rebase main
                 cd docs
                 git rm -rf build/html
                 make html O=-W
                 git add -f build/html
                 git commit -m "rebase"
                 git push -f origin gh-pages

  linux_build_on_commit:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - run:
          name: Run style checks
          command: |
            pip install pre-commit
            pre-commit run --all
            if [ $? != 0 ] ; then echo 'Style checks failed, please install pre-commit and run pre-commit run --all and push the change'; exit 1; fi
      - run:
          name: Install dependencies
          command: |
            pip install --upgrade cmake
            pip install --upgrade pybind11[global]
            pip install numpy
            pip install unittest-xml-reporting
            sudo apt-get update
            sudo apt install libsndfile1-dev libsamplerate0-dev ffmpeg libjpeg-turbo8-dev \
              zlib1g-dev libbz2-dev liblzma-dev
      - run:
         name: Install AWS SDK
         command: |
           sudo apt install libcurl4-openssl-dev libssl-dev
           git clone --depth 1 --recurse-submodules https://github.com/aws/aws-sdk-cpp.git
           cd aws-sdk-cpp
           mkdir build
           cd build
           cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY="s3" -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON
           make
           sudo make install
      - run:
          name: Build package
          command: |
            CMAKE_ARGS="-DMLX_ENABLE_AWS=ON" \
              python setup.py develop
      - run:
          name: Run Python tests
          command: |
            python -m xmlrunner discover -v python/tests -o test-results/
      - store_test_results:
          path: test-results

  mac_build_on_commit:
    parameters:
      xcode_version:
        type: string
        default: "15.2.0"
    macos:
      xcode: << parameters.xcode_version >>
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            brew install python@3.9
            brew install libsndfile libsamplerate ffmpeg jpeg-turbo zlib bzip2 xz aws-sdk-cpp
            python3.9 -m venv env
            source env/bin/activate
            pip install --upgrade cmake
            pip install --upgrade pybind11[global]
            pip install numpy
            pip install unittest-xml-reporting
      - run:
          name: Build package
          command: |
            source env/bin/activate
            CMAKE_ARGS="-DMLX_ENABLE_AWS=ON" \
              python setup.py develop
      - run:
          name: Run Python tests
          command: |
            source env/bin/activate
            python -m xmlrunner discover -v python/tests -o test-results/
      - store_test_results:
          path: test-results

  linux_build_wheels:
    parameters:
      python_version:
        type: string
        default: "39"
      extra_env:
        type: string
        default: "DEV_RELEASE=1"
    executor: manylinux2014
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install perl-IPC-Cmd
      - run:
          name: Build wheel
          command: |
            PYBIN=/opt/python/cp<< parameters.python_version >>-cp<< parameters.python_version >>/bin
            $PYBIN/pip install -U pip
            $PYBIN/pip install build
            $PYBIN/pip install twine
            SUPER_BUILD=ON \
              << parameters.extra_env >> \
              $PYBIN/python -m build --wheel
            auditwheel show dist/*
            auditwheel repair dist/*
      - when:
          condition:
            equal: [ << parameters.extra_env >>, "PYPI_RELEASE=1" ]
          steps:
            - run:
                name: Upload package
                command: |
                  PYBIN=/opt/python/cp<< parameters.python_version >>-cp<< parameters.python_version >>/bin
                  $PYBIN/python -m twine upload wheelhouse/*
      - store_artifacts:
          path: wheelhouse/

  mac_build_wheels:
    macos:
      xcode: << parameters.xcode_version >>
    resource_class: macos.m1.medium.gen1
    parameters:
      xcode_version:
        type: string
        default: "15.2.0"
      python_version:
        type: string
        default: "3.9"
      extra_env:
        type: string
        default: "DEV_RELEASE=1"
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            brew install python@<< parameters.python_version >>
            brew install libsndfile libsamplerate ffmpeg jpeg-turbo zlib bzip2 xz aws-sdk-cpp
            python<< parameters.python_version >> -m venv env
            source env/bin/activate
            pip install --upgrade pip
            pip install --upgrade cmake
            pip install --upgrade pybind11[global]
            pip install numpy
            pip install build
            pip install delocate
            pip install twine
      - run:
          name: Build wheel
          command: |
            source env/bin/activate
            SUPER_BUILD=ON \
              << parameters.extra_env >> \
              python -m build --wheel
            delocate-listdeps dist/*
            delocate-wheel dist/*
      - when:
          condition:
            equal: [ << parameters.extra_env >>, "PYPI_RELEASE=1" ]
          steps:
            - run:
                name: Upload package
                command: |
                  source env/bin/activate
                  twine upload dist/*
      - store_artifacts:
          path: dist/

workflows:
  build_on_commit:
    when:
      and:
        - matches:
            pattern: "^(?!pull/)[-\\w]+$"
            value: << pipeline.git.branch >>
        - not: << pipeline.parameters.dev_release >>
        - not: << pipeline.parameters.pypi_release >>
    jobs:
      - linux_build_on_commit
      - mac_build_on_commit
      - build_documentation
  prb:
    when:
      matches:
        pattern: "^pull/\\d+(/head)?$"
        value: << pipeline.git.branch >>
    jobs:
      - hold:
          type: approval
      - linux_build_on_commit:
          requires: [ hold ]
      - mac_build_on_commit:
          requires: [ hold ]

  build_dev_release:
    when:
      and:
        - equal: [ main, << pipeline.git.branch >> ]
        - << pipeline.parameters.dev_release >>
    jobs:
      - linux_build_wheels:
          matrix:
            parameters:
              python_version: ["39", "310", "311", "312", "313"]
              extra_env: ["DEV_RELEASE=1"]
      - mac_build_wheels:
          matrix:
            parameters:
              python_version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
              xcode_version: ["15.2.0"]
              extra_env: ["DEV_RELEASE=1"]

  build_pypi_release:
    when:
      and:
        - equal: [ main, << pipeline.git.branch >> ]
        - << pipeline.parameters.pypi_release >>
    jobs:
      - linux_build_wheels:
          matrix:
            parameters:
              python_version: ["39", "310", "311", "312", "313"]
              extra_env: ["PYPI_RELEASE=1"]
      - mac_build_wheels:
          matrix:
            parameters:
              python_version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
              xcode_version: ["15.2.0"]
              extra_env: ["PYPI_RELEASE=1"]
      - build_documentation:
          upload-docs: true
